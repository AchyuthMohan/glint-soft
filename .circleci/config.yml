version: 2.1

# Define reusable jobs
jobs:
  # Build and test job
  build-and-test:
    docker:
      - image: openjdk:17-jdk-slim
    working_directory: ~/repo
    steps:
      - checkout
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "pom.xml" }}
            - v1-dependencies-
      - run:
          name: Install Maven
          command: |
            apt-get update
            apt-get install -y maven
      - run:
          name: Cache Maven dependencies
          command: mvn dependency:go-offline
      - save_cache:
          paths:
            - ~/.m2
          key: v1-dependencies-{{ checksum "pom.xml" }}
      - run:
          name: Build and test
          command: mvn clean compile test
      - run:
          name: Generate test reports
          command: |
            mkdir -p ~/test-results/junit/
            find . -type f -regex ".*/target/surefire-reports/.*xml" -exec cp {} ~/test-results/junit/ \;
          when: always
      - store_test_results:
          path: ~/test-results/junit
      - store_artifacts:
          path: ~/test-results/junit
          destination: test-results

  # Code quality checks
  code-quality:
    docker:
      - image: openjdk:17-jdk-slim
    working_directory: ~/repo
    steps:
      - checkout
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "pom.xml" }}
            - v1-dependencies-
      - run:
          name: Install Maven
          command: |
            apt-get update
            apt-get install -y maven
      - run:
          name: Cache Maven dependencies
          command: mvn dependency:go-offline
      - save_cache:
          paths:
            - ~/.m2
          key: v1-dependencies-{{ checksum "pom.xml" }}
      - run:
          name: Checkstyle
          command: mvn checkstyle:check
      - run:
          name: Generate Checkstyle report
          command: mvn checkstyle:checkstyle
      - store_artifacts:
          path: target/site/checkstyle.html
          destination: checkstyle-report
      - run:
          name: JaCoCo Code Coverage
          command: mvn jacoco:report
      - store_artifacts:
          path: target/site/jacoco/index.html
          destination: coverage-report

  # Security scan
  security-scan:
    docker:
      - image: openjdk:17-jdk-slim
    working_directory: ~/repo
    steps:
      - checkout
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "pom.xml" }}
            - v1-dependencies-
      - run:
          name: Install Maven
          command: |
            apt-get update
            apt-get install -y maven
      - run:
          name: Cache Maven dependencies
          command: mvn dependency:go-offline
      - save_cache:
          paths:
            - ~/.m2
          key: v1-dependencies-{{ checksum "pom.xml" }}
      - run:
          name: Dependency vulnerability scan
          command: mvn org.owasp:dependency-check-maven:check
      - store_artifacts:
          path: target/dependency-check-report.html
          destination: security-report

  # Build and package
  build-package:
    docker:
      - image: openjdk:17-jdk-slim
    working_directory: ~/repo
    steps:
      - checkout
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "pom.xml" }}
            - v1-dependencies-
      - run:
          name: Install Maven
          command: |
            apt-get update
            apt-get install -y maven
      - run:
          name: Cache Maven dependencies
          command: mvn dependency:go-offline
      - save_cache:
          paths:
            - ~/.m2
          key: v1-dependencies-{{ checksum "pom.xml" }}
      - run:
          name: Build and package
          command: mvn clean package -DskipTests
      - run:
          name: Build example application
          command: |
            cd glint-examples
            mvn clean package -DskipTests
      - store_artifacts:
          path: glint-core/target/glint-core-1.0.0-SNAPSHOT.jar
          destination: glint-core.jar
      - store_artifacts:
          path: glint-annotations/target/glint-annotations-1.0.0-SNAPSHOT.jar
          destination: glint-annotations.jar
      - store_artifacts:
          path: glint-starter/target/glint-starter-1.0.0-SNAPSHOT.jar
          destination: glint-starter.jar
      - store_artifacts:
          path: glint-examples/target/glint-examples-1.0.0-SNAPSHOT.jar
          destination: glint-examples.jar

  # Integration tests
  integration-tests:
    docker:
      - image: openjdk:17-jdk-slim
    working_directory: ~/repo
    steps:
      - checkout
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "pom.xml" }}
            - v1-dependencies-
      - run:
          name: Install Maven
          command: |
            apt-get update
            apt-get install -y maven
      - run:
          name: Cache Maven dependencies
          command: mvn dependency:go-offline
      - save_cache:
          paths:
            - ~/.m2
          key: v1-dependencies-{{ checksum "pom.xml" }}
      - run:
          name: Build framework
          command: mvn clean install -DskipTests
      - run:
          name: Run integration tests
          command: |
            cd glint-examples
            mvn spring-boot:run &
            sleep 30
            curl -f http://localhost:8080/actuator/health || exit 1
            curl -f http://localhost:8080/api/v1/users || exit 1
            pkill -f spring-boot:run
      - run:
          name: Test example application endpoints
          command: |
            cd glint-examples
            mvn spring-boot:run &
            sleep 30
            # Test POST endpoint
            curl -X POST http://localhost:8080/api/v1/users \
              -H "Content-Type: application/json" \
              -d '{"name":"CircleCI Test","email":"test@circleci.com"}' || exit 1
            # Test GET endpoint
            curl -f http://localhost:8080/api/v1/users || exit 1
            # Test health endpoint
            curl -f http://localhost:8080/actuator/health || exit 1
            pkill -f spring-boot:run

# Define workflows
workflows:
  version: 2
  build-test-and-deploy:
    jobs:
      # Run build and test in parallel
      - build-and-test:
          filters:
            branches:
              only: /.*/
      
      # Run code quality checks in parallel
      - code-quality:
          filters:
            branches:
              only: /.*/
      
      # Run security scan in parallel
      - security-scan:
          filters:
            branches:
              only: /.*/
      
      # Run integration tests after build succeeds
      - integration-tests:
          requires:
            - build-and-test
          filters:
            branches:
              only: /.*/
      
      # Build and package after all tests pass
      - build-package:
          requires:
            - build-and-test
            - code-quality
            - security-scan
            - integration-tests
          filters:
            branches:
              only: /.*/

  # Nightly build workflow
  nightly-build:
    triggers:
      - schedule:
          cron: "0 2 * * *"  # Run at 2 AM UTC daily
    jobs:
      - build-and-test
      - code-quality
      - security-scan
      - build-package

  # Release workflow
  release:
    jobs:
      - build-and-test:
          filters:
            branches:
              only: main
      - code-quality:
          filters:
            branches:
              only: main
      - security-scan:
          filters:
            branches:
              only: main
      - integration-tests:
          requires:
            - build-and-test
          filters:
            branches:
              only: main
      - build-package:
          requires:
            - build-and-test
            - code-quality
            - security-scan
            - integration-tests
          filters:
            branches:
              only: main
